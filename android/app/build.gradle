plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "tech.mingxi.image_merger_dart"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "tech.mingxi.image_merger_dart"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    signingConfigs {
        release {
            if (hasSpecificKeyStore('release')) {
                def key = loadKeyStore('release')
                storeFile key.store
                storePassword key.storePassword
                keyAlias key.alias
                keyPassword key.keyPassword
            }
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "拼图"
        }
        debug {
            resValue "string", "app_name", "拼图 dev"
            applicationIdSuffix ".dev"
        }
    }
}

flutter {
    source '../..'
}

dependencies {}

// sign keystore utils
def hasSpecificKeyStore(type) {
    def keystoresDir = new File(rootDir, 'keystores')
    if (!keystoresDir.exists()) {
        throw new FileNotFoundException("keystores is not found: ${keystoresDir}")
    }
    def keystorePropsFile = new File(new File(keystoresDir, type), 'keystore.properties')
    return keystorePropsFile.exists()
}

def loadKeyStore(type) {
    def keystoresDir = new File(rootDir, 'keystores')

    if (!keystoresDir.exists()) {
        throw new FileNotFoundException("keystores is not found: ${keystoresDir}")
    }

    def targetDir = new File(keystoresDir, type)
    def keystorePropsFile = new File(targetDir, 'keystore.properties')

    if (!keystorePropsFile.exists()) {
        throw new FileNotFoundException("keystore properties is not found: ${keystorePropsFile}")
    }

    def keystoreProps = new Properties()
    keystoreProps.load(new FileInputStream(keystorePropsFile))

    def keystoreFile = new File(targetDir, keystoreProps['key.store'])
    if (!keystoreFile.exists()) {
        throw new FileNotFoundException("keystore is not found: ${keystoreFile}")
    }

    return [
            store        : keystoreFile,
            alias        : keystoreProps['key.alias'],
            storePassword: keystoreProps['key.store.password'],
            keyPassword  : keystoreProps['key.alias.password']
    ]
}